plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id "org.quiltmc.gradle.licenser" version "2.0.1"
}

version =  property("mod.version") + "+" + "1.20.1"
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

license {
    rule file("./HEADER")
    include '**/*.java'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.gegy.dev' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.isxander.dev/releases' }
    maven { url 'https://repo.inventivetalent.org/repository/public/' }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

//if (stonecutter.current.active) { // run configs for non-active version would be invalid
//    loom {
//        runConfigs.all {
//            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
//            runDir "../../run" // use a global run directory for all versions
//        }
//    }
//}

loom {
    accessWidenerPath = file("src/main/resources/skinshuffle.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.'deps.yarn'}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.'deps.loader'}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.'deps.fabric_api'}"

    modLocalRuntime modCompileOnly("com.terraformersmc:modmenu:${project.'runtime.modmenu'}")

    include implementation('com.konghq:unirest-java:3.11.09:standalone')

    include modImplementation("dev.lambdaurora:spruceui:${project.'deps.spruceui'}")
    include modImplementation("maven.modrinth:cicada:0.8.1+1.20.1")
    include modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}")

    include implementation("org.jsoup:jsoup:${project.'deps.jsoup'}")
    include implementation("org.mineskin:java-client:+")
    include implementation("commons-validator:commons-validator:1.7")

    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.2.0")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.'deps.loader'
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "loader_version": project.'deps.loader',
                "target_minecraft": project.'mod.target'
    }
}

java {
    var version = JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
